/*
	question.h
	The implementation of properties and methods for the question object.
	Generated by SudzC.com
*/
#import "question.h"

@implementation question
	@synthesize questionCode = _questionCode;
	@synthesize answerType = _answerType;
	@synthesize shuffle = _shuffle;
	@synthesize stem = _stem;

	- (id) init
	{
		if(self = [super init])
		{
			self.answerType = nil;
			self.stem = nil;

		}
		return self;
	}

	+ (question*) newWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (question*)[[question alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.questionCode = [[Soap getNodeValue: node withName: @"questionCode"] intValue];
			self.answerType = [Soap getNodeValue: node withName: @"answerType"];
			self.shuffle = [[Soap getNodeValue: node withName: @"shuffle"] intValue];
			self.stem = [Soap getNodeValue: node withName: @"stem"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"question"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [[NSMutableString alloc] init];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return [s autorelease];
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		[s appendFormat: @"<questionCode>%@</questionCode>", [NSString stringWithFormat: @"%i", self.questionCode]];
		if (self.answerType != nil) [s appendFormat: @"<answerType>%@</answerType>", [[self.answerType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<shuffle>%@</shuffle>", [NSString stringWithFormat: @"%i", self.shuffle]];
		if (self.stem != nil) [s appendFormat: @"<stem>%@</stem>", [[self.stem stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[question class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		if(self.answerType != nil) { [_answerType release]; }
		if(self.stem != nil) { [_stem release]; }
		[super dealloc];
	}

@end
